{"event":"phase1-init","status":"started","date":"2025-08-17","details":{"scope":"HTS coil modeling scaffolding","notes":"Biotâ€“Savart loop and grid sampling implemented."},"refs":["docs/roadmap.ndjson:Phase 1"]}
{"event":"kpi-script","status":"completed","date":"2025-08-17","details":{"script":"scripts/generate_hts_artifacts.py","outputs":["artifacts/field_uniformity_report.json","artifacts/b_field_centerline.png","artifacts/b_field_ripple.png"]}}
{"event":"analytic-check","status":"completed","date":"2025-08-17","details":{"script":"scripts/analytic_axial_check.py","metric":"rel_error","target":"< 5%"},"snippet.python":"from hts.coil import mu_0, hts_coil_field\nimport numpy as np\nN,I,R=100,5000.0,1.0\nBnum=hts_coil_field(np.array([0,0,0.0]),I=I,N=N,R=R)[2]\nBana=mu_0*N*I/(2*R)\nprint(abs(Bnum-Bana)/(abs(Bana)+1e-18))"}
{"event":"envelope","status":"completed","date":"2025-08-17","details":{"script":"scripts/generate_operating_envelope.py","output":"artifacts/operating_envelope.json"}}
{"event":"gates","status":"completed","date":"2025-08-17","details":{"script":"scripts/metrics_gate.py","gates":["B_mean>=5T","ripple<=0.01","thermal_margin>=20mK"]},"snippet.python":"# Simplified feasibility\nimport json, numpy as np\nfrom hts import sample_circular_coil_plane\nX,Y,Bz=sample_circular_coil_plane()\nmean=float(np.nanmean(Bz));std=float(np.nanstd(Bz))\nprint(json.dumps({'B_mean_T':mean,'ripple_rms':float(std/(abs(mean)+1e-18))}))"}
