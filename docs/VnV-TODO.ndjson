{"task":"Validate stored energy integration vs analytic center value for small ROI","status":"todo","evidence":"Compare U_grid to U_uniform using mean B and volume"}
{"task":"Verify optimizer respects B>=5T constraint","status":"todo","evidence":"best_config.json satisfies gate"}
{"task":"Confirm caching correctness (hash changes -> cache miss)","status":"todo","evidence":"perturb config and observe new cache file"}
{"task":"Quantify Helmholtz vs single ripple improvement","status":"todo","evidence":"side-by-side plot and delta%"}
{"task":"3D coverage KPI validation","status":"todo","evidence":"unit test with synthetic uniform field"}
{"task":"Tolerance UQ plots presence","status":"todo","evidence":"artifacts exist and keys present"}
{"category":"V&V","task":"B-field KPI: mean>=5 T and RMS ripple<=0.01% over target volume","priority":"High","status":"open","python_snippet":"# After generating B field samples (vector or magnitude array), compute RMS ripple and assert thresholds"}
{"category":"V&V","task":"Axial field analytic check at center vs Biotâ€“Savart","priority":"High","status":"open","python_snippet":"# Compare numeric center field to mu0 * N * I /(2R) for a circular loop stack"}
{"category":"V&V","task":"Thermal margin logging and cooldown events","priority":"Medium","status":"open","python_snippet":"# Simulate thermal load; assert 'cooldown' events appear after overrun markers in timeline.ndjson"}
{"category":"V&V","task":"Current density derating sanity: J_c(T,B)>0","priority":"Medium","status":"open","python_snippet":"from hts.materials import jc_vs_tb; print(jc_vs_tb(77,5,90,1e10)>0)"}
{"category":"V&V","task":"Operating envelope JSON present with expected keys","priority":"Medium","status":"open","python_snippet":"import json, pathlib; data=json.loads(pathlib.Path('artifacts/operating_envelope.json').read_text()); print(set(['B_mean_T','ripple_rms']).issubset(data))"}
{"task":"CI gating: efficiency >= 0.99","priority":"High","status":"planned","python_snippet":"# Ensure volumetric_kpis.json present; metrics_gate checks eta>=0.99 when available"}
{"task":"Asymmetric misalignment validation","priority":"Medium","status":"planned","python_snippet":"# Use sample_plane_from_loops with per-loop z offsets; compare to symmetric baseline"}
