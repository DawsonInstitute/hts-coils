# Notebook Testing and MyBinder Validation
name: Notebook Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'notebooks/**'
      - 'binder/**'
      - 'requirements*.txt'
      - '.github/workflows/notebook-testing.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'notebooks/**'
      - 'binder/**'
      - 'requirements*.txt'
  schedule:
    # Run weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

jobs:
  notebook-execution-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('binder/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r binder/requirements.txt
        pip install nbconvert pytest-notebook
    
    - name: List installed packages
      run: pip list
    
    - name: Test notebook execution
      run: |
        # Test critical notebooks for execution
        jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=300 \
          --output-dir=/tmp/ notebooks/01_introduction_overview.ipynb
        
        jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=300 \
          --output-dir=/tmp/ notebooks/02_hts_physics_fundamentals.ipynb
        
        jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=300 \
          --output-dir=/tmp/ notebooks/09_rebco_paper_reproduction.ipynb
    
    - name: Run validation framework tests
      run: |
        cd notebooks
        python -c "
        from validation_framework import comprehensive_rebco_validation
        result = comprehensive_rebco_validation()
        assert result['all_passed'], f'Validation failed: {result}'
        print('‚úÖ All REBCO validations passed')
        "
    
    - name: Memory usage check
      run: |
        python -c "
        import psutil
        import os
        process = psutil.Process(os.getpid())
        memory_mb = process.memory_info().rss / 1024 / 1024
        print(f'Memory usage: {memory_mb:.1f} MB')
        assert memory_mb < 1000, f'Memory usage too high: {memory_mb:.1f} MB > 1000 MB'
        print('‚úÖ Memory usage within limits')
        "

  mybinder-compatibility-test:
    runs-on: ubuntu-latest
    needs: notebook-execution-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install repo2docker
      run: |
        python -m pip install --upgrade pip
        pip install jupyter-repo2docker
    
    - name: Test MyBinder build
      run: |
        # Test that the repository can be built by repo2docker
        repo2docker --dry-run --ref HEAD .
    
    - name: Validate binder configuration
      run: |
        # Check that required binder files exist
        test -f binder/requirements.txt || (echo "‚ùå binder/requirements.txt missing" && exit 1)
        test -f binder/runtime.txt || (echo "‚ùå binder/runtime.txt missing" && exit 1)
        echo "‚úÖ Binder configuration files present"
        
        # Check for problematic packages
        if grep -i "comsol\|fenics\|petsc\|mpi4py" binder/requirements.txt | grep -v "^#"; then
          echo "‚ùå Found problematic packages in requirements.txt"
          exit 1
        fi
        echo "‚úÖ No problematic packages found"
    
    - name: Install and test MyBinder requirements
      run: |
        pip install -r binder/requirements.txt
        python -c "
        import numpy, scipy, matplotlib, jupyter, ipywidgets, plotly, sympy
        print('‚úÖ All required packages importable')
        "

  documentation-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate documentation links
      run: |
        # Check that all referenced notebooks exist
        if [ -f README.md ]; then
          # Extract notebook references from README
          grep -o "notebooks/[^)]*\.ipynb" README.md | while read notebook; do
            if [ ! -f "$notebook" ]; then
              echo "‚ùå Referenced notebook missing: $notebook"
              exit 1
            fi
          done
          echo "‚úÖ All referenced notebooks exist"
        fi
    
    - name: Check REBCO validation status
      run: |
        # Ensure REBCO paper reproduction notebook exists
        test -f notebooks/09_rebco_paper_reproduction.ipynb || \
          (echo "‚ùå REBCO paper reproduction notebook missing" && exit 1)
        echo "‚úÖ REBCO paper reproduction notebook present"

  performance-benchmarks:
    runs-on: ubuntu-latest
    needs: notebook-execution-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r binder/requirements.txt
        pip install memory-profiler
    
    - name: Run performance benchmarks
      run: |
        cd notebooks
        python -c "
        import time
        import tracemalloc
        from validation_framework import comprehensive_rebco_validation
        
        # Memory profiling
        tracemalloc.start()
        start_time = time.time()
        
        result = comprehensive_rebco_validation()
        
        elapsed_time = time.time() - start_time
        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()
        
        print(f'Execution time: {elapsed_time:.3f} seconds')
        print(f'Peak memory usage: {peak / 1024 / 1024:.1f} MB')
        print(f'Validation success rate: {sum(result[\"results\"].values()) / len(result[\"results\"]) * 100:.1f}%')
        
        # Performance assertions
        assert elapsed_time < 10.0, f'Execution too slow: {elapsed_time:.3f}s > 10s'
        assert peak / 1024 / 1024 < 100, f'Memory usage too high: {peak / 1024 / 1024:.1f} MB > 100 MB'
        assert result[\"all_passed\"], 'Not all validations passed'
        
        print('‚úÖ Performance benchmarks passed')
        "

  dependency-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check on dependencies
      run: |
        pip install -r binder/requirements.txt
        safety check --json | python -c "
        import sys, json
        data = json.load(sys.stdin)
        if data:
            print('‚ùå Security vulnerabilities found:')
            for vuln in data:
                print(f'  {vuln[\"package\"]} {vuln[\"installed_version\"]}: {vuln[\"advisory\"]}')
            sys.exit(1)
        else:
            print('‚úÖ No security vulnerabilities found')
        "
    
    - name: Run bandit security scan
      run: |
        # Scan Python code for security issues
        bandit -r notebooks/ -f json | python -c "
        import sys, json
        try:
            data = json.load(sys.stdin)
            if data.get('results', []):
                print('‚ùå Security issues found in code')
                for result in data['results']:
                    print(f'  {result[\"filename\"]}:{result[\"line_number\"]} - {result[\"issue_text\"]}')
                sys.exit(1)
            else:
                print('‚úÖ No security issues found in code')
        except json.JSONDecodeError:
            print('‚úÖ No security issues found in code')
        "

  deployment-test:
    runs-on: ubuntu-latest
    needs: [notebook-execution-test, mybinder-compatibility-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r binder/requirements.txt
    
    - name: Run deployment readiness test
      run: |
        python mybinder_deployment_test.py
    
    - name: Generate deployment report
      run: |
        if [ -f mybinder_deployment_report.json ]; then
          echo "## üöÄ MyBinder Deployment Status" >> $GITHUB_STEP_SUMMARY
          python -c "
          import json
          with open('mybinder_deployment_report.json') as f:
              report = json.load(f)
          
          status = '‚úÖ READY' if report['deployment_ready'] else '‚ùå NOT READY'
          timestamp = report['timestamp']
          
          print(f'**Status:** {status}')
          print(f'**Last Tested:** {timestamp}')
          print(f'**MyBinder URL:** {report[\"mybinder_url\"]}')
          print('')
          print('### Test Results')
          for check, passed in report['checks'].items():
              emoji = '‚úÖ' if passed else '‚ùå'
              print(f'- {emoji} {check.replace(\"_\", \" \").title()}')
          " >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Update deployment badge
      if: success()
      run: |
        echo "[![MyBinder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/${GITHUB_REPOSITORY}/HEAD)" > deployment_badge.md
        echo "Last updated: $(date -u)" >> deployment_badge.md

  educational-content-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate educational documentation
      run: |
        # Check that educational documentation exists
        test -f docs/EDUCATIONAL_DOCUMENTATION.md || \
          (echo "‚ùå Educational documentation missing" && exit 1)
        test -f docs/GLOSSARY.md || \
          (echo "‚ùå Glossary missing" && exit 1)
        test -f docs/CONCEPT_MAP.md || \
          (echo "‚ùå Concept map missing" && exit 1)
        echo "‚úÖ Educational documentation complete"
    
    - name: Check learning objective coverage
      run: |
        # Verify that notebooks cover stated learning objectives
        learning_areas=("physics" "electromagnetic" "thermal" "mechanical" "optimization")
        for area in "${learning_areas[@]}"; do
          if ! find notebooks/ -name "*.ipynb" -exec grep -l "$area" {} \; | head -1 > /dev/null; then
            echo "‚ö†Ô∏è  Warning: No notebook clearly covers $area"
          else
            echo "‚úÖ $area covered in notebooks"
          fi
        done